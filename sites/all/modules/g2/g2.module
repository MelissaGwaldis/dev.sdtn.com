<?php
/**
 * @file
 * This defines a node-based glossary module, as opposed to the term-based
 * glossary.module
 *
 * (C) 2005-2011 Frederic G. MARAND for Ouest SystÃ¨mes Informatiques (OSInet)
 *
 * Licensed under the CeCILL version 2 and General Public License version 2 or
 * later
 *
 * License note: G2 is distributed by OSInet to its customers under the
 * CeCILL 2.0 license. OSInet support services only apply to the module
 * when distributed by OSInet, not by any third-party further down the
 * distribution chain.
 *
 * If you obtained G2 from drupal.org, that site received it under the General
 * Public License version 2 or later (GPLv2+) and can therefore distribute it
 * under the same terms, and so can you and just anyone down the chain as long
 * as the GPLv2+ terms are abided by, the module distributor in that case being
 * the drupal.org organization or the downstream distributor, not OSInet.
 *
 * TODO: split settings form with local tabs or vertical tabs
 *
 * TODO: test rss
 *
 * @link http://wiki.audean.com/g2/choosing @endlink
 */
require __DIR__ . '/g2.inc';

/**
 * Implements hook_block_configure().
 */
function g2_block_configure($delta) {
  $count_options = array(
    '1' => '1',
    '2' => '2',
    '5' => '5',
    '10' => '10',
  );
  $info = g2_block_info();
  $info = $info[$delta];
  $form['caching'] = array(
    '#markup' => t('<p>Caching mode: @mode</p>', array('@mode' => G2\block_cache_decode($info['cache']))),
  );

  switch ($delta) {
    case G2\DELTAALPHABAR:
      $form[G2\VARALPHABAR] = array(
        '#type' => 'textfield',
        '#title' => t('List of initials to be included in alphabar'),
        '#default_value' => variable_get(G2\VARALPHABAR, G2\DEFALPHABAR),
        '#description' => t('The alphabar lists the initials for which links to initial pages will be included.'),
      );
      $form[G2\VARALPHABARROWLEN]   = array(
        '#type' => 'textfield',
        '#title' => t('Maximum length of lines in the alphabar'),
        '#default_value' => variable_get(G2\VARALPHABARROWLEN, G2\DEFALPHABARROWLEN),
        '#size' => 3,
        '#description' => t('Each line except the last one will have exactly that number of links.'),
      );
      break;

    case G2\DELTARANDOM:
      $form[G2\VARRANDOMSTORE] = array(
        '#type' => 'checkbox',
        '#title' => t('Store latest random entry'),
        '#default_value' => variable_get(G2\VARRANDOMSTORE, G2\DEFRANDOMSTORE),
        '#description' => t('When this setting is TRUE (default value),
          the latest random value is kept in the DB to avoid showing the same pseudo-random
          value on consecutive page displays.
          For small sites, it is usually best to keep it saved.
          For larger sites, unchecking this setting will remove one database write with locking.'),
      );
      $form[G2\VARRANDOMTERMS] = array(
        '#type' => 'checkbox',
        '#title' => t('Return taxonomy terms for the current entry'),
        '#default_value' => variable_get(G2\VARRANDOMTERMS, G2\DEFRANDOMTERMS),
        '#description' => t('The taxonomy terms will be returned by XML-RPC and made available to the theme.
             Default G2 themeing will display them.'),
      );
      break;

    case G2\DELTATOP:
      $form[G2\VARTOPITEMCOUNT] = array(
        '#type' => 'select',
        '#title' => t('Number of items'),
        '#default_value' => variable_get(G2\VARTOPITEMCOUNT, G2\DEFTOPITEMCOUNT),
        '#options' => $count_options,
      );
      break;

    case G2\DELTAWOTD:
      // Convert nid to "title [<nid>]" even if missing.
      // @see autocomplete()
      $nid = variable_get(G2\VARWOTDENTRY, G2\DEFWOTDENTRY);
      $node = node_load($nid);
      if (empty($node)) {
        $node = new stdClass();
        $node->nid = 0;
        $node->title = NULL;
      }
      $form[G2\VARWOTDENTRY] = array(
        '#type' => 'textfield',
        '#title' => t('Entry for the day'),
        '#maxlength' => 60,
        '#autocomplete_path' => G2\PATHAUTOCOMPLETE,
        '#required' => TRUE,
        // !title: we don't filter since this is input, not output,
        // and can contain normally escaped characters, to accommodate
        // entries like "<", "C#" or "AT&T"
        '#default_value' => t('!title [@nid]', array('!title' => $node->title, '@nid' => $nid)),
      );
      $form[G2\VARWOTDBODYSIZE] = array(
        '#type' => 'textfield',
        '#title' => t('Number of text characters to be displayed from entry definition body, if one exists'),
        '#size' => 4,
        '#maxlength' => 4,
        '#required' => TRUE,
        '#default_value' => variable_get(G2\VARWOTDBODYSIZE, G2\DEFWOTDBODYSIZE),
      );
      $form[G2\VARWOTDAUTOCHANGE] = array(
        '#type' => 'checkbox',
        '#title' => t('Auto-change daily'),
        '#required' => TRUE,
        '#default_value' => variable_get(G2\VARWOTDAUTOCHANGE, G2\DEFWOTDAUTOCHANGE),
        '#description' => t('This setting will only work if cron or poormanscron is used.'),
      );
      $form[G2\VARWOTDTERMS] = array(
        '#type' => 'checkbox',
        '#title' => t('Return taxonomy terms for the current entry'),
        '#default_value' => variable_get(G2\VARWOTDTERMS, G2\DEFWOTDTERMS),
        '#description' => t('The taxonomy terms will be returned by XML-RPC and made available to the theme.
             Default G2 themeing will display them.'),
      );
      $default_wotd_title = t('Word of the day in the G2 glossary');
      $form[G2\VARWOTDTITLE] = array(
        '#type' => 'textfield',
        '#title' => t('Title for the WOTD block'),
        '#description' => t('This title is also the default title for the WOTD feed, if none is defined. It is overridden by the default Drupal block title, if the latter is not empty.'),
        '#required' => TRUE,
        '#default_value' => variable_get(G2\VARWOTDTITLE, $default_wotd_title),
      );

      $form['wotd_feed'] = array(
        '#type' => 'fieldset',
        '#title' => t('RSS Feed'),
      );
      $form['wotd_feed'][G2\VARWOTDFEEDLINK] = array(
        '#type' => 'checkbox',
        '#title' => t('Display feed link'),
        '#default_value' => variable_get(G2\VARWOTDFEEDLINK, G2\DEFWOTDFEEDLINK),
        '#description' => t('Should the theme display the link to the RSS feed for this block ?'),
      );
      $form['wotd_feed'][G2\VARWOTDFEEDTITLE] = array(
        '#type' => 'textfield',
        '#title' => t('The feed title'),
        '#size' => 60,
        '#maxlength' => 60,
        '#required' => TRUE,
        '#default_value' => variable_get(G2\VARWOTDFEEDTITLE, variable_get(G2\VARWOTDTITLE, $default_wotd_title)),
        '#description' => t('The title for the feed itself.
             This will typically be used by aggregators to remind users of the feed and link to it.
             If nulled, G2 will reset it to the title of the block.'),
      );
      $form['wotd_feed'][G2\VARWOTDFEEDAUTHOR] = array(
        '#type' => 'textfield',
        '#title' => t('The feed item author'),
        '#size' => 60,
        '#maxlength' => 60,
        '#required' => TRUE,
        '#default_value' => variable_get(G2\VARWOTDFEEDAUTHOR, G2\DEFWOTDFEEDAUTHOR),
        '#description' => t('The author name to be included in the feed entries.
          In this string @author will be replaced by the actual author information.'),
      );
      $form['wotd_feed'][G2\VARWOTDFEEDDESCR] = array(
        '#type' => 'textfield',
        '#title' => t('The feed description'),
        '#size' => 60,
        '#maxlength' => 60,
        '#required' => TRUE,
        '#default_value' => variable_get(G2\VARWOTDFEEDDESCR, t('A daily definition from the G2 Glossary at !site')),
        '#description' => t('The description for the feed itself.
          This will typically be used by aggregators when describing the feed prior to subscription.
          It may contain !site, which will dynamically be replaced by the site base URL.'),
      );
      break;

    case G2\DELTALATEST:
      $form[G2\VARLATESTITEMCOUNT] = array(
        '#type' => 'select',
        '#title' => t('Number of items'),
        '#default_value' => variable_get(G2\VARLATESTITEMCOUNT, G2\DEFLATESTITEMCOUNT),
        '#options' => $count_options,
      );
      break;

    default:
      break;
  }
  return $form;
}

/**
 * Implements hook_block_info().
 */
function g2_block_info() {
  $blocks = array();
  $blocks[G2\DELTAALPHABAR]['info'] = variable_get('g2_alphabar_info', t('G2 Alphabar'));
  $blocks[G2\DELTARANDOM  ]['info'] = variable_get('g2_random_info',   t('G2 Random'));
  $blocks[G2\DELTATOP     ]['info'] = variable_get('g2_top_info',      t('G2 Top'));
  $blocks[G2\DELTAWOTD    ]['info'] = variable_get('g2_wotd_info',     t('G2 Word of the day'));
  $blocks[G2\DELTALATEST  ]['info'] = variable_get('g2_latest_info',   t('G2 Latest'));

  // Not all roles have g2 view permission.
  $blocks[G2\DELTAALPHABAR]['cache'] = DRUPAL_CACHE_PER_ROLE;
  // Else it couldn't be random.
  $blocks[G2\DELTARANDOM  ]['cache'] = DRUPAL_NO_CACHE;
  // Can contain unpublished nodes.
  $blocks[G2\DELTATOP     ]['cache'] = DRUPAL_CACHE_PER_ROLE;
  // Not all roles have g2 view permission.
  $blocks[G2\DELTAWOTD    ]['cache'] = DRUPAL_CACHE_PER_ROLE;
  // Can contain unpublished nodes.
  $blocks[G2\DELTALATEST  ]['cache'] = DRUPAL_CACHE_PER_ROLE;
  return $blocks;
}

/**
 * Implements hook_block_save().
 */
function g2_block_save($delta, $edit) {
  switch ($delta) {
    case G2\DELTAALPHABAR:
      variable_set(G2\VARALPHABAR,        $edit[G2\VARALPHABAR]);
      variable_set(G2\VARALPHABARROWLEN,  $edit[G2\VARALPHABARROWLEN]);
      break;

    case G2\DELTARANDOM:
      variable_set(G2\VARRANDOMSTORE,     $edit[G2\VARRANDOMSTORE]);
      variable_set(G2\VARRANDOMTERMS,     $edit[G2\VARRANDOMTERMS]);
      break;

    case G2\DELTATOP:
      variable_set(G2\VARTOPITEMCOUNT,    $edit[G2\VARTOPITEMCOUNT]);
      break;

    case G2\DELTAWOTD:
      // Convert "some title [<nid>, sticky]" to nid.
      $entry = $edit[G2\VARWOTDENTRY];
      $matches = array();
      $count = preg_match('/.*\[(\d*).*\]$/', $entry, $matches);
      $nid = $count ? $matches[1] : 0;

      variable_set(G2\VARWOTDENTRY,       $nid);
      variable_set(G2\VARWOTDBODYSIZE,    $edit[G2\VARWOTDBODYSIZE]);
      variable_set(G2\VARWOTDAUTOCHANGE,  $edit[G2\VARWOTDAUTOCHANGE]);
      variable_set(G2\VARWOTDDATE,        REQUEST_TIME);
      variable_set(G2\VARWOTDTERMS,       $edit[G2\VARWOTDTERMS]);
      variable_set(G2\VARWOTDFEEDLINK,    $edit[G2\VARWOTDFEEDLINK]);
      variable_set(G2\VARWOTDFEEDTITLE,   $edit[G2\VARWOTDFEEDTITLE]);
      variable_set(G2\VARWOTDFEEDDESCR,   $edit[G2\VARWOTDFEEDDESCR]);
      variable_set(G2\VARWOTDFEEDAUTHOR,  $edit[G2\VARWOTDFEEDAUTHOR]);
      variable_set(G2\VARWOTDTITLE,       $edit[G2\VARWOTDTITLE]);
      break;

    case G2\DELTALATEST:
      variable_set(G2\VARLATESTITEMCOUNT, $edit[G2\VARLATESTITEMCOUNT]);
      break;

    default:
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function g2_block_view($delta) {
  // watchdog('g2', "hook_block/view/$delta");
  switch ($delta) {
    case G2\DELTAALPHABAR:
      $block['subject'] = t('G2 Glossary pages');
      $block['content'] = theme('g2_alphabar', array('alphabar' => G2\alphabar()));
      break;

    case G2\DELTARANDOM:
      $block['subject'] = t('Random G2 glossary entry');
      $block['content'] = theme('g2_random', array('node' => G2\random()));
      break;

    case G2\DELTATOP:
      $max = variable_get(G2\VARTOPITEMCOUNT, G2\DEFTOPITEMCOUNT);
      $block['subject'] = t('@count most popular G2 glossary entries',
        array('@count' => $max));
      $block['content'] = theme('g2_node_list', array('nodes' => G2\top($max, FALSE, TRUE)));
      break;

    case G2\DELTAWOTD:
      $block['subject'] = variable_get(G2\VARWOTDTITLE, t('Word of the day in the G2 glossary'));
      $block['content'] = theme('g2_wotd', array('node' => G2\wotd(variable_get(G2\VARWOTDBODYSIZE, G2\DEFWOTDBODYSIZE))));
      break;

    case G2\DELTALATEST:
      $max = variable_get(G2\VARLATESTITEMCOUNT, G2\DEFLATESTITEMCOUNT);
      $block['subject'] = t('@count most recently updated G2 glossary entries',
        array('@count' => $max));
      $block['content'] = theme('g2_node_list', array('nodes' => G2\latest($max, TRUE)));
      break;

    // Should happen only when using a new code version on an older schema
    // without updating: ignore.
    default:
      $block = NULL;
      break;
  }

  return $block;
}

/**
 * Implements hook_context_plugins().
 *
 * This is a ctools plugins hook.
 */
function g2_context_plugins() {
  module_load_include('inc', 'g2', 'context/g2.plugins');
  return _g2_context_plugins();
}


/**
 * Implements hook_context_registry().
 */
function g2_context_registry() {
  module_load_include('inc', 'g2', 'context/g2.plugins');
  return _g2_context_registry();
}

/**
 * Implements hook_cron().
 *
 * In G2's case, change the WOTD once a day if this feature is enabled,
 * which is the default case.
 */
function g2_cron() {
  if (variable_get(G2\VARWOTDAUTOCHANGE, G2\DEFWOTDAUTOCHANGE)) {
    $date0 = date('z', variable_get(G2\VARWOTDDATE, REQUEST_TIME));
    $date1 = date('z');
    if ($date1 <> $date0) {
      $random = G2\random();
      // watchdog("g2_cron", "d0 = $date0, d1 = $date1, random : "
      // . print_r($random,TRUE) . "</pre>", NULL, WATCHDOG_INFO);
      variable_set(G2\VARWOTDENTRY, $random->nid);
      variable_set(G2\VARWOTDDATE,  mktime());
    }
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function g2_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'context') {
    $ret = array(
      'version' => 3,
      'path' => drupal_get_path('module', 'g2') . '/context',
      // Not until http://drupal.org/node/1242632 is fixed
      // 'file' => 'g2.context_defaults.inc',
    );
  }
  else {
    $ret = NULL;
  }

  return $ret;
}

/**
 * Implements hook_delete().
 */
function g2_delete($node) {
  // dsm($node, __FUNCTION__);
  db_delete('g2_node')
  ->condition('nid', $node->nid)
  ->execute();
}

/**
 * Implements hook_entity_info_alter().
 */
function g2_entity_info_alter(&$info) {
  // Add the 'Entry list' view mode for nodes.
  $info['node']['view modes'] += array(
    'g2_entry_list' => array(
      'label' => t('G2 Entry list'),
      'custom settings' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function g2_field_extra_fields() {
  $expansion = array(
    'label' => t('Expansion'),
    'description' => t('For acronyms/initialisms, this is the expansion of the initials to full words'),
    'weight' => 0,
  );
  $period = array(
    'label' => t('Life period'),
    'description' => t('This is the period of time during which the entity described by the term was actually alive, not the lifetime of the term itself, since any term is immortal to some extent.'),
    'weight' => 1,
  );
  $extra_title = array(
    'label' => 'Extra title',
    'description' => t('The optional CSS-hidden extra title on node displays'),
    'weight' => 99,
  );

  $extra['node'][G2\NODETYPE] = array(
    'form' => array(
      'expansion' => $expansion,
      'period' => $period,
      'complement' => array(
        'label' => t('Complement'),
        'description' => t('Additional non-versioned editor-only meta-information about the definition'),
        'weight' => 2,
      ),
      'origin' => array(
        'label' => t('IP/Origin'),
        'description' => t('Additional non-versioned editor-only Intellectual Property/Origin information about the definition'),
        'weight' => 3,
      ),
    ),
    'display' => array(
      'expansion' => $expansion,
      'period' => $period,
      'extra_title' => $extra_title,
    ),
  );

  return $extra;
}

/**
 * Implements hook_filter_info().
 */
function g2_filter_info() {
  $filters = array(
    'filter_g2' => array(
      'title' => t('G2 Glossary filter'),
      'description' => t('Allows users to link to G2 entries using &lt;dfn&gt; elements.'),
      'prepare callback' => 'G2\filter_prepare',
      'process callback' => 'G2\filter_process',
      'tips callback' => 'G2\filter_tips',
    ),
  );

  return $filters;
}

/**
 * Implements hook_form().
 *
 * XXX 20110122 use fields, not properties for expansion/period/editor info.
 */
function g2_form(&$node, $form_state) {

  $admin = user_access('bypass node access')
    || user_access('edit any g2_entry content')
    || (user_access('edit own g2_entry content') && $user->uid == $node->uid);

  $type = node_type_get_type($node);

  // Pre-fill title information on URL-based node creation.
  if (!isset($node->title)) {
    $node->title = check_plain(drupal_substr($_GET['q'],
      drupal_strlen(G2\PATHNODEADD) + 1));
  }

  $form = array();

  $form['content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contents'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -10,
  );
  $form['content']['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
    '#description'   => t('Plain text: no markup allowed.'),
  );

  $form['content']['expansion'] = array(
    '#type' => 'textfield',
    '#title' => t('Entry expansion (for acronyms/initialisms)'),
    '#required' => FALSE,
    '#default_value' => isset($node->expansion) ? $node->expansion: NULL,
    '#description'   => t('Plain text: no markup allowed.'),
  );

  $form['content']['period'] = array(
    '#type' => 'textfield',
    '#title' => t('Life period of this entry'),
    '#required' => FALSE,
    '#description' => t('This is the period of time during which the entity described by the term was actually alive, not the lifetime of the term itself, since any term is immortal to some extent. Plain text, no markup allowed.'),
    '#default_value' => isset($node->period) ? $node->period : NULL,
  );

  // Hide published-only secondary information in a vertical tab.
  $form['publishing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Editor-only information'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Information in this box is not published in view mode, only during node edition.'),
    '#group' => 'additional_settings',
    '#weight' => -5,
    '#access' => $admin,
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'g2') . '/g2.js'),
    ),
  );
  $form['publishing']['complement'] = array(
    '#type' => 'textarea',
    '#title' => t('Complement'),
    '#rows' => 10,
    '#required' => FALSE,
    '#description' => t('Information not pertaining to origin of document: comments, notes...'),
    '#default_value' => isset($node->complement) ? $node->complement : NULL,
    '#access' => $admin,
  );
  $form['publishing']['origin'] = array(
    '#type' => 'textarea',
    '#title' => t('Origin/I.P.'),
    '#rows' => 10,
    '#required' => FALSE,
    '#description' => t('Informations about the origin/IP licensing of the definition'),
    '#default_value' => isset($node->origin) ? $node->origin : NULL,
    '#access' => $admin,
  );

  return $form;
}

/**
 * Implements hook_help().
 */
function g2_help($path, $arg) {
  $ret = '';
  switch ($path) {
    // Works in D6.
    case 'admin/help#g2':
      $ret = t('<p>G2 defines a glossary service for Drupal sites. To compare it with the default Drupal glossary:</p>
           <ul><li>G2 content is node-based, not term-based</li>
             <li>G2 leverages existing code from glossary for input filtering and node marking</li>
             <li>G2 RAM use does not significantly increase with larger entry counts, which makes is more suitable for larger glossaries</li>
             <li>G2 requests much less from the database than the default glossary</li>
             <li>G2 uses three taxonomy vocabularies: context, period, and grammatical nature.</li>
             <li>G2 defines optional blocks</li>
             <li>G2 is remotely usable via XML-RPC</li>
             <li>G2 does not provide term feeds</li>
             <li>G2 access control is simplistic, targeted to non-community sites</li></ul>');
      break;

    case 'admin/structure/block/configure':
      $helps = array(
        G2\DELTAALPHABAR => t('This block displays a clickable list of initials from the G2 glossary.'),
        G2\DELTARANDOM => t('This block displays a pseudo-random entry (different each time) from the G2 glossary.'),
        G2\DELTATOP => t('This block displays a list of the most viewed entries from the G2 glossary.'),
        G2\DELTALATEST => t('This block displays a list of the most recently updated entries from the G2 glossary.'),
        G2\DELTAWOTD => t('This block displays a once-a-day entry from the G2 glossary.'),
      );
      if ($arg[4] == 'g2' && isset($helps[$arg[5]])) {
        $ret = $helps[$arg[5]];
      }
      break;
  }
  return $ret;
}

/**
 * Implements hook_init().
 */
function g2_init() {
  $main = variable_get(G2\VARPATHMAIN, G2\DEFPATHMAIN);

}

/**
 * Implements hook_insert().
 *
 * XXX New feature to add: make extra node info revision-aware.
 */
function g2_insert($node) {
  drupal_write_record('g2_node', $node);
}

/**
 * Implements hook_load().
 *
 * Access control was performed earlier by core: no need to do it again here.
 *
 * XXX New feature to add: make extra node info revision-aware.
 */
function g2_load($nodes) {
  $q = db_select('g2_node', 'gn');
  $result = $q->fields('gn')
    ->condition('gn.nid', array_keys($nodes), 'IN')
    ->execute();

  foreach ($result as $row) {
    foreach ($row as $property => $col) {
      $nodes[$row->nid]->$property = $col;
    }
  }
}

/**
 * Implements hook_menu().
 */
function g2_menu() {
  $items = array();

  $items[G2\PATHSETTINGS] = array(
    'title' => 'G2 glossary',
    'description' => 'Define the various parameters used by the G2 module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('G2\admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  // AJAX autocomplete callback, so no menu entry.
  $items[G2\PATHAUTOCOMPLETE] = array(
    'page callback' => 'G2\autocomplete',
    'access arguments' => array(G2\PERMVIEW),
    'type' => MENU_CALLBACK,
  );

  $items[G2\PATHINITIAL . '/%'] = array(
    'page callback' => 'theme',
    'page arguments' => array('g2_initial', 2),
    'access arguments' => array(G2\PERMVIEW),
    'type' => MENU_CALLBACK,
  );

  $items[G2\PATHENTRIES . '/%g2_title'] = array(
    'title' => 'G2 entries by name',
    'page callback' => 'G2\page_entries',
    'page arguments' => array(2),
    'access arguments' => array(G2\PERMVIEW),
    'type' => MENU_CALLBACK,
  );

  // G2 main page: variable path. This type of semi-dynamic entry needs
  // special care.
  // @see g2_admin_settings_submit()
  $items[variable_get(G2\VARPATHMAIN, G2\DEFPATHMAIN)] = array(
    'title' => G2\TITLEMAIN,
    'page callback' => 'G2\page_main',
    'access arguments' => array(G2\PERMVIEW),
    'type' => MENU_NORMAL_ITEM,
  );

  $items[G2\PATHWOTDFEED] = array(
    'title' => G2\TITLEWOTDFEED,
    'page callback' => 'G2\wotd_feed',
    'access arguments' => array(G2\PERMVIEW),
    'type' => MENU_CALLBACK,
  );

  // Offers to clear referers for all entries.
  $items['g2/wipe'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('G2\referer_wipe_confirm_form'),
    'access arguments' => array(G2\PERMADMIN),
    'type' => MENU_CALLBACK,
  );

  // Offers to clear referers for a given entry.
  $items['g2/wipe/%g2_nid'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('G2\referer_wipe_confirm_form', 2),
    'access arguments' => array(G2\PERMADMIN),
    'type' => MENU_CALLBACK,
  );

  $items['node/%g2_nid/referers'] = array(
    'title' => 'Referers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('G2\referer_links', 1),
    'access arguments' => array(G2\PERMADMIN),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Menu loader for g2_node.
 *
 * @param int $us_nid
 *   Safety with regard to $us_nid is checked within node_load().
 *
 * @return object|FALSE|NULL
 *   - loaded object if accessible G2 node
 *   - NULL if accessible object is not a G2 node
 *   - FALSE otherwise
 */
function g2_nid_load($us_nid = 0) {
  $node = node_load($us_nid);
  if ($node->type != G2\NODETYPE) {
    $node = NULL;
  }
  return $node;
}

/**
 * Implements hook_node_access().
 */
function g2_node_access($node, $op, $account) {
  switch ($op) {
    case 'create':
    case 'delete':
    case 'update':
      $ret = user_access(G2\PERMADMIN, $account);
      break;

    case 'view':
      $ret = user_access(G2\PERMVIEW, $account);
      break;

    default:
      $uri = entity_uri('node', $node);
      watchdog('g2', 'Node access for invalid op %op', array('%op' => $op),
        WATCHDOG_NOTICE,
        l($node->title, $uri['path'], $uri['options']));
      $ret = FALSE;
  }

  return $ret;
}

/**
 * Implements hook_node_info().
 */
function g2_node_info() {
  $ret = array(
    G2\NODETYPE => array(
      'name' => t('G2 entry'),
      'base' => 'g2',
      'description' => t('A G2 entry is a term (usual sense, not drupal sense) for which a definition and various additional information is provided, notably at the editorial level'),
      'help' => t('The title should be either a acronym/initialism or a normal word. If it is an acronym/initialism, use the expansion field to decode it, not the definition field.'),
      'has_title' => TRUE,
      'title_label' => t('Term to define'),
    ),
  );
  return $ret;
}

/**
 * Implements hook_node_view().
 *
 * Change the publication date only for the WOTD feed so that even old
 * terms, when chosen for publication, reflect the publication date,
 * instead of the node creation date as is the default.
 *
 * - Do not apply to non-G2 nodes.
 * - Do not apply to non-WOTD feeds.
 */
function g2_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'rss' && $node->type == G2\NODETYPE && ($_GET['q'] == G2\PATHWOTDFEED)) {
    $node->created = variable_get(G2\VARWOTDDATE, REQUEST_TIME);
    $node->name = filter_xss_admin(strtr(variable_get(G2\VARWOTDFEEDAUTHOR, '@author'),
      array('@author' => check_plain($node->name))));
  }
}

/**
 * Implements hook_permission().
 */
function g2_permission() {
  $ret = array(
    G2\PERMADMIN => array(
      'title' => t('Administer G2 entries'),
      'description' => t('Access administrative information on G2 entries. This permission does not grant access to the module settings, which are controlled by the "administer site configuration" permission.'),
      'restrict access' => TRUE,
    ),
    G2\PERMVIEW => array(
      'title' => t('View G2 entries'),
      'description' => t('This permission allows viewing G2 entries, subject to additional node access control.'),
    ),
  );
  return $ret;
}

/**
 * Implements hook_preprocess_page().
 *
 * - introduce G2 page template suggestion when page is in a G2 context
 */
function g2_preprocess_page(&$vars) {
  if ($plugin = context_get_plugin('reaction', 'g2_template')) {
    $plugin->execute($vars);
  }
}

/**
 * Implements hook_theme().
 */
function g2_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'g2');
  include_once $path . '/theme/theme.inc';
  $base = array(
    'file' => 'theme.inc',
    'path' => $path . '/theme',
  );

  $ret = array(
    'g2_alphabar'  => array('variables' => array('alphabar' => array(), 'rowlen' => 0)),
    'g2_node_list' => array('variables' => array('nodes' => array())),
    'g2_random'    => array('variables' => array('node' => NULL)),
    'g2_wotd'      => array('variables' => array('node' => NULL)),
    'g2_entries'   => array('variables' => array('entry' => '')),
    'g2_initial'   => array('variables' => array('initial' => NULL)),
    'g2_main'      => $base + array(
      'template'     => 'g2_main',
      'variables'    => array(
        'alphabar'     => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
        'text'         => '',
      ),
    ),
    'g2_field'     => array(
      'variables'    => array(
        'expansion'    => '',
        'name'         => '',
        'title'        => '',
    )),
  );
  return $ret;
}

/**
 * Menu loader for %g2_title.
 *
 * Only returns unpublished nodes to users with "administer nodes".
 *
 * @param string $title
 *   Title loader.
 *
 * @return object
 *   Formatted title.
 */
function g2_title_load($title) {
  // Loop detection. Not using drupal_static() "if a function's static
  // variable does not depend on any information outside of the function that
  // might change during a single page request, then it's ok to use the
  // "static" keyword instead of the drupal_static() function.
  static $hits = array();

  $min_status = user_access('administer nodes')
    ? NODE_NOT_PUBLISHED
    : NODE_PUBLISHED;

  if (!isset($hits[$title])) {
    $q = db_select('node', 'n');
    $q->fields('n', array('nid'))
      ->condition('n.type', G2\NODETYPE)
      ->condition('n.status', $min_status, '>=')
      ->condition('n.title', $title . '%', 'LIKE')
      ->addTag('node_access');
    // dsm($q->__toString());
    $result = $q->execute();
    $nids = array();
    foreach ($result as $row) {
      $nids[] = $row->nid;
    }
    $hits[$title] = node_load_multiple($nids);
  }
  return $hits[$title];
}

/**
 * Implements hook_update().
 */
function g2_update($node) {
  // dsm($node, __FUNCTION__);
  drupal_write_record('g2_node', $node, 'nid');
}

/**
 * Implements hook_user_load().
 */
function g2_user_load($users) {
  $q = db_select('node', 'n');
  $result = $q->fields('n', array('nid', 'title', 'uid', 'type'))
    ->condition('n.type', G2\NODETYPE)
    ->condition('n.status', 1)
    ->condition('n.uid', array_keys($users), 'IN')
    ->orderBy('n.changed', 'DESC')
    ->orderBy('n.created', 'DESC')
    ->addTag('node_access')
    ->range(0, 10)
    ->execute();
  foreach ($result as $row) {
    $uri = entity_uri('node', $row);
    $uri['options']['absolute'] = TRUE;
    $users[$row->uid]->nodes[] = array(
      'value' => l($row->title, $uri['path'], $uri['options']),
    );
  }
}

/**
 * Implements hook_user_view().
 */
function g2_user_view($account, $view_mode, $langcode) {
  if (isset($account->nodes) && count($account->nodes) >= 1) {
    $nodes = array();
    foreach ($account->nodes as $node) {
      $nodes[] = $node['value'];
    }
    $account->content['summary']['g2'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Recent G2 definitions'),
      '#markup' => theme('item_list', array('items' => $nodes)),
    );
  }
}

/**
 * Implements hook_view().
 *
 * @param object $node
 *   The node for which content is to be built.
 * @param string $view_mode
 *   The view_mode used to chose what to build.
 *
 * @return object
 *   The node with updated fields.
 */
function g2_view($node, $view_mode) {
  $title = check_plain($node->title);

  if (node_is_page($node)) {
    $bc = drupal_get_breadcrumb();
    $bc[] = l(G2\TITLEMAIN, $g2_home = variable_get(G2\VARPATHMAIN, G2\DEFPATHMAIN));
    $initial = drupal_substr($title, 0, 1);
    $bc[] = l($title[0], $g2_home . '/initial/' . $initial);
    unset($initial);
    drupal_set_breadcrumb($bc);
    G2\override_site_name();

    // Only log referrers on full page views.
    if (variable_get(G2\VARLOGREFERRERS, G2\DEFLOGREFERRERS)) {
      G2\log_referrers($node);
    }

    // Activate context.
    if ($plugin = context_get_plugin('condition', 'g2')) {
      $plugin->execute('g2_node');
    }
  }

  /*
  // Build more link, apply input format, including sanitizing.
  $node = node_prepare($node, $teaser);
  */

  if (!empty($node->expansion)) {
    $node->content['g2_expansion'] = array(
      '#markup' => theme('g2_field', array(
        'name'    => 'expansion',
        'title'   => t('In other words'),
        'data'    => $node->expansion,
      )),
    );
  }

  if (!empty($node->period)) {
    $node->content['g2_period'] = array(
      '#markup' => theme('g2_field', array(
        'name'    => 'period',
        'title'   => t('Term time period'),
        'data'  => $node->period,
      )),
      '#weight' => 2,
    );
  }

  // The following line adds invisible text that will be prepended to
  // the node in case some search routine favors the beginning of the
  // body. It can be turned off in case search engines frown upon this.
  if (variable_get(G2\VARHIDDENTITLE, G2\DEFHIDDENTITLE)) {
    $node->content['g2_extra_title'] = array(
      '#markup' => '<div class="g2-extra-title">'
        . check_plain($node->title)
        . '</div>',
      '#weight' => -1,
    );
  }

  return $node;
}

/**
 * Implements hook_view_api().
 */
function g2_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'g2') . '/views',
  );
}

/**
 * Implements hook_xmlrpc().
 *
 * Note that functions returning node portions return them unfiltered. It is the
 * caller's responsibility to apply filtering depending on its actual use of the
 * data.
 */
function g2_xmlrpc() {
  $mapping = array(
    'g2.alphabar' => 'G2\alphabar',
    'g2.api'      => 'G2\api',
    'g2.latest'   => 'G2\latest',
    'g2.random'   => 'G2\random',
    'g2.stats'    => 'G2\stats',
    'g2.top'      => 'G2\top',
    'g2.wotd'     => 'G2\wotd',
  );

  // Local XML-RPC is no longer forced to 'allowed' in the Drupal 6/7 versions.
  if (!variable_get(G2\VARXMLRPC, G2\DEFXMLRPC)) {
    $mapping = array_fill_keys(array_keys($mapping), 'xmlrpc_error');
  }

  return $mapping;
}

/**
 * Theme an alphabar for g2_block(view, G2\DELTAALPHABAR)
 *
 * @param array $variables
 *   The available variables for the theme function.
 *
 * @return string
 *   HTML: the formatted alphabar.
 */
function theme_g2_alphabar($variables) {
  $alphabar = $variables['alphabar'];
  $rowlen = $variables['rowlen'];
  if (empty($rowlen)) {
    $rowlen = variable_get(G2\VARALPHABARROWLEN, G2\DEFALPHABARROWLEN);
  }
  $ret = '';
  $i = 0;
  foreach ($alphabar as $initial) {
    $ret .= $initial . '&nbsp;';
    if ($i % $rowlen == $rowlen - 1) {
      $ret .= '<br />';
    }
    $i++;
  }
  return $ret;
}

/**
 * Return a homonyms disambiguation page for homonym entries.
 *
 * The page is built:
 * - either by this module
 * - either from a site node (typically in PHP input format)
 *
 * When examining the code to build $entry, remember that
 * we need to obtain slashes, which drupal preprocesses.
 *
 * Note that we query and use n.title instead of using $entry2
 * in the results to obtain mixed case results when they exist.
 *
 * TODO 20110122 handle taxonomy properly, likely by just ignoring it and
 * relying on the view mode
 *
 * @return string
 *   HTML: the themed "list of entries" page content.
 */
function theme_g2_entries($variables) {
  $entries = $variables['entries'];
  $entry = filter_xss(arg(2));

  drupal_set_title(t('G2 Entries for %entry', array('%entry' => $entry)), PASS_THROUGH);

  // The nid for the disambiguation page.
  $page_nid = variable_get(G2\VARHOMONYMS, G2\DEFHOMONYMS);

  if ($page_nid) {
    $page_node = node_load($page_nid);
    // Coder false positive: http://drupal.org/node/704010 .
    $ret = node_view($page_node);
  }
  else {

    $count = count($entries);
    switch ($count) {
      case 0:
        $ret = t('<p>There are currently no entries for %entry.</p>',
          array('%entry' => $entry));
        if (node_access('create', G2\NODETYPE)) {
          $ret .= t('<p>Would you like to <a href="!url" title="Create new entry for @entry">create</a> one ?</p>',
            array(
            '!url' => url(str_replace('_', '-', G2\PATHNODEADD) . '/' . $entry),
            '@entry' => strip_tags($entry),
          ));
        }
        break;

      case 1:
        $next = entity_uri('node', reset($entries));
        // Does the webmaster want us to jump ?
        if (variable_get(G2\VARGOTOSINGLE, G2\DEFGOTOSINGLE)) {
          $redirect_type = variable_get(G2\VARHOMONYMSREDIRECT, G2\DEFHOMONYMSREDIRECT);
          drupal_goto($next['path'], $next['options'], $redirect_type);
          // Never returns.
        }
        /* Do not break: we continue with default processing in this case. */

      default:
        $vid = variable_get(G2\VARHOMONYMSVID, G2\DEFHOMONYMSVID);
        $rows = array();
        foreach ($entries as $nid => $node) {
          $uri = entity_uri('node', $node);
          $terms = array();
          if (!isset($node->taxonomy)) {
            $node->taxonomy = array();
          }
          foreach ($node->taxonomy as $tid => $term) {
            if ($vid && $term->vid == $vid) {
              $terms[] = l($term->name, taxonomy_term_path($term));
            }
          }
          $taxonomy = empty($terms)
            ? NULL
          : ' <span class="inline">(' . implode(', ', $terms) . ')</span>';
          $teaser = isset($node->teaser)
            ? strip_tags(check_markup($node->teaser, $node->format))
            : NULL;
          $rows[] = t('!link!taxonomy: !teaser!more', array(
            '!link' => l($node->title, $uri['path'], $uri['options']),
            // Safe by construction.
            '!taxonomy' => $taxonomy,
            '!teaser' => $teaser,
            '!more' => theme('more_link', array(
                'url' => $uri['path'],
                'options' => $uri['options'],
                'title' => t('Full definition for @name: !teaser', array(
                  '@name' => $entry,
                  '!teaser' => $teaser,
                )),
              )
            ),
          ));
        }
        $ret = theme('item_list', array(
          'items' => $rows,
          'title' => NULL,
          'type' => 'ul',
          'attributes' => array('class' => 'g2-entries'),
        ));
        /* no break; in final default clause */
    }
    return $ret;
  }
}

/**
 * Return a themed g2 node pseudo-field, like expansion or period
 *
 * These are not filtered prior to invoking this theme function
 * within g2_view() (unlike D4.x->D6), so function performs filter_xss'ing.
 *
 * @param array $variables
 *   - g2-name: the name of the pseudo-field
 *   - g2-title: the title for the pseudo-field
 *   - g2-data: the contents of the pseudo-field
 *
 * @return string
 *   HTML: the themed pseudo-field.
 */
function theme_g2_field($variables) {
  // Set in code, not by user, so assumed safe.
  $title = $variables['title'];

  $name = 'g2-' . $variables['name'];

  // Set by user, so unsafe.
  $data = filter_xss($variables['data']);

  $ret = <<<EOT
<div class="field field-name-body field-type-text-with-summary field-label-above $name">
  <div class="field-label">$title:</div>
  <div class="field-item even">
    <p>$data</p>
    </div><!-- field-item -->
  </div><!-- field ... -->
EOT;
  return $ret;
}

/**
 * Return a themed page listing entries by initial segment.
 *
 * This page is less information-rich than the disambiguation page,
 * because it is expected to have much more content.
 *
 * @param string $variables
 *   Set from hook_menu.
 *
 * @return string
 *   HTML: the themed page content.
 */
function theme_g2_initial($variables) {
  // Activate context.
  if ($plugin = context_get_plugin('condition', 'g2')) {
    $plugin->execute('g2_user');
  }

  $initial = $variables['initial'];
  $initial = filter_xss($initial);

  // We are not using t(), because this is NOT translatable content.
  // coder false positive: filter_xss'ed
  drupal_set_title(filter_xss(strtr(G2\TITLEINITIAL, array('%initial' => $initial))));
  $ret = G2\initial($initial);
  return $ret;
}

/**
 * Theme a G2 entries list, as used by the "latest" and "top" blocks.
 *
 * Node access control is the responsibility of the caller passing the
 * node list.
 *
 * @return string
 *   HTML: the themed entries list.
 */
function theme_g2_node_list($variables) {
  $nodes = $variables['nodes'];
  $ar = array();
  foreach ($nodes as $node) {
    $class = ($node->status == NODE_PUBLISHED)
      ? NULL
      : 'node-unpublished';
    $uri = entity_uri('node', $node);
    $uri['options']['attributes']['class'][] = $class;
    $ar[] = l($node->title, $uri['path'], $uri['options']);
  }
  $ret = theme('item_list', array('items' => $ar));
  return $ret;
}

/**
 * Theme a random entry.
 *
 * This is actually a short view for just about any single node, but it
 * is even shorter than node_view($node, TRUE).
 *
 * TODO 20110122: replace with just a node rendered with a specific view_mode
 *
 * @return string
 *   HTML: the themed entry.
 */
function theme_g2_random($variables) {
  $node = $variables['node'];
  $uri = entity_uri('node', $node);
  $ret = l($node->title, $uri['path'], $uri['options']);
  if (!empty($node->expansion)) {
    // Why t() ? Because varying languages have varying takes on spaces before /
    // after semicolons.
    $ret .= t(': @expansion', array('@expansion' => $node->expansion));
  }
  // No longer hard coded: use a view_mode instead.
  // No need to test: also works on missing taxonomy
  // $ret .= G2\entry_terms($node);
  $ret .= theme('more_link', array(
      'url' => $uri['path'],
      // TODO check evolution of http://drupal.org/node/1036190.
      'options' => $uri['options'],
      'title' => t('&nbsp;(+)'),
    )
  );
  return $ret;
}

/**
 * Theme a WOTD block.
 *
 * TODO 20110122: replace with just a node rendered with a specific view_mode
 *
 * @param object $variables
 *   The node for the word of the day. teaser and body are already filtered and
 *   truncated if needed.
 *
 * @return object
 *   title / nid / teaser / [body]
 */
function theme_g2_wotd($variables) {
  $node = $variables['node'];
  if (empty($node)) {
    return NULL;
  }
  $uri = entity_uri('node', $node);

  $link = l($node->title, $uri['path'], $uri['options']);
  if (isset($node->expansion) and !empty($node->expansion)) {
    // Teaser already filtered by G2\wotd(), don't filter twice.
    // TODO 20110122 make sure this is true.
    $teaser = '<span id="g2_wotd_expansion">' . strip_tags($node->expansion) . '</span>';
    $ret = t('!link: !teaser', array(
      '!link' => $link,
      '!teaser' => $teaser,
    ));
    unset($teaser);
  }
  else {
    $ret = $link;
  }

  // No longer needed: use a view_mode instead
  /*
      if (!empty($node->body)) {
      // already filtered by G2\wotd(), don't filter twice, just strip.
      $body = strip_tags($node->body);
      if ($node->truncated) {
        $body .= '&hellip;';
      }
      $ret .= '<div id="g2_wotd_body">' . $body . '</div>';
    }
  */

  // No need to test: it won't change anything unless taxonomy has been returned
  // $ret .= G2\entry_terms($node);
  $ret .= theme('more_link', array(
      'url' => $uri['path'],
      // TODO check evolution of http://drupal.org/node/1036190
      'options' => $uri['options'],
      'title' => t('&nbsp;(+)'),
    )
  );
  if (variable_get(G2\VARWOTDFEEDLINK, G2\DEFWOTDFEEDLINK)) {
    $ret .= theme('feed_icon', array(
      'url' => url(G2\PATHWOTDFEED, array('absolute' => TRUE)),
      // TODO: find a better title.
      'title' => t('Glossary feed'),
    ));
  }
  return $ret;
}
